package moonbitlang/core/option

// Values
fn empty[T]() -> Option[T]

fn some[T](T) -> Option[T]

fn unless[T](Bool, () -> T) -> Option[T]

fn when[T](Bool, () -> T) -> Option[T]

// Types and methods
impl Option {
  bind[T, U](Self[T], (T) -> Self[U]) -> Self[U]
  compare[X : Compare + Eq](Self[X], Self[X]) -> Int
  default[X]() -> Self[X]
  filter[T](Self[T], (T) -> Bool) -> Self[T]
  flatten[T](Self[Self[T]]) -> Self[T]
  is_empty[T](Self[T]) -> Bool
  map[T, U](Self[T], (T) -> U) -> Self[U]
  or[T](Self[T], T) -> T
  or_else[T](Self[T], () -> T) -> T
  unwrap[X](Self[X]) -> X
}

// Traits

// Extension Methods


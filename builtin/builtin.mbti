package moonbitlang/core/builtin

// Values
fn abort[T](String) -> T

fn debug[X : Debug](X) -> Unit

fn ignore[T](T) -> Unit

fn inspect(Show, ~content : String = .., ~loc : SourceLoc = _, ~args_loc : ArgsLoc = _) -> Result[Unit, String]

fn op_ge[T : Compare + Eq](T, T) -> Bool

fn op_gt[T : Compare + Eq](T, T) -> Bool

fn op_le[T : Compare + Eq](T, T) -> Bool

fn op_lt[T : Compare + Eq](T, T) -> Bool

fn op_notequal[T : Eq](T, T) -> Bool

fn physical_equal[T](T, T) -> Bool

fn print[T : Show](T) -> Unit

fn print_string(String) -> Unit

fn println[T : Show](T) -> Unit

// Types and methods
pub type ArgsLoc Array[Option[SourceLoc]]
impl ArgsLoc {
  to_json(Self) -> String
  to_string(Self) -> String
}

type Buffer
impl Buffer {
  expect(Self, ~content : String = .., ~loc : SourceLoc = _, ~args_loc : ArgsLoc = _) -> Result[Unit, String]
  make(Int) -> Self
  reset(Self) -> Unit
  to_bytes(Self) -> Bytes
  to_string(Self) -> String
  write_char(Self, Char) -> Unit
  write_string(Self, String) -> Unit
  write_sub_string(Self, String, Int, Int) -> Unit
}

pub type Js_string
impl Js_string {
  log(Self) -> Unit
  new(String) -> Self
  op_add(Self, Self) -> Self
}

pub type SourceLoc
impl SourceLoc {
  debug_write(Self, Buffer) -> Unit
  to_string(Self) -> String
}

pub type UnsafeMaybeUninit
impl Unit {
  debug_write(Unit, Buffer) -> Unit
  op_equal(Unit, Unit) -> Bool
}
impl Bool {
  debug_write(Bool, Buffer) -> Unit
  default() -> Bool
  not(Bool) -> Bool
  op_compare(Bool, Bool) -> Int
  op_equal(Bool, Bool) -> Bool
  to_string(Bool) -> String
}
impl Byte {
  compare(Byte, Byte) -> Int
  debug_write(Byte, Buffer) -> Unit
  op_equal(Byte, Byte) -> Bool
  to_int(Byte) -> Int
  to_string(Byte) -> String
}
impl Char {
  compare(Char, Char) -> Int
  default() -> Char
  from_int(Int) -> Char
  op_equal(Char, Char) -> Bool
  to_int(Char) -> Int
}
impl Int {
  asr(Int, Int) -> Int
  clz(Int) -> Int
  compare(Int, Int) -> Int
  compare_u(Int, Int) -> Int
  ctz(Int) -> Int
  debug_write(Int, Buffer) -> Unit
  default() -> Int
  div_u(Int, Int) -> Int
  is_neg(Int) -> Bool
  is_non_neg(Int) -> Bool
  is_non_pos(Int) -> Bool
  is_pos(Int) -> Bool
  land(Int, Int) -> Int
  lnot(Int) -> Int
  lor(Int, Int) -> Int
  lsl(Int, Int) -> Int
  lsr(Int, Int) -> Int
  lxor(Int, Int) -> Int
  mod_u(Int, Int) -> Int
  op_add(Int, Int) -> Int
  op_div(Int, Int) -> Int
  op_equal(Int, Int) -> Bool
  op_mod(Int, Int) -> Int
  op_mul(Int, Int) -> Int
  op_neg(Int) -> Int
  op_sub(Int, Int) -> Int
  popcnt(Int) -> Int
  to_double(Int) -> Double
  to_int64(Int) -> Int64
  to_string(Int) -> String
  trunc_double_u(Double) -> Int
}
impl Int64 {
  asr(Int64, Int) -> Int64
  clz(Int64) -> Int
  compare(Int64, Int64) -> Int
  compare_u(Int64, Int64) -> Int
  ctz(Int64) -> Int
  debug_write(Int64, Buffer) -> Unit
  default() -> Int64
  div_u(Int64, Int64) -> Int64
  extend_i32_u(Int) -> Int64
  land(Int64, Int64) -> Int64
  lnot(Int64) -> Int64
  lor(Int64, Int64) -> Int64
  lsl(Int64, Int) -> Int64
  lsr(Int64, Int) -> Int64
  lxor(Int64, Int64) -> Int64
  mod_u(Int64, Int64) -> Int64
  op_add(Int64, Int64) -> Int64
  op_div(Int64, Int64) -> Int64
  op_equal(Int64, Int64) -> Bool
  op_mod(Int64, Int64) -> Int64
  op_mul(Int64, Int64) -> Int64
  op_neg(Int64) -> Int64
  op_sub(Int64, Int64) -> Int64
  popcnt(Int64) -> Int
  reinterpret_as_double(Int64) -> Double
  to_double(Int64) -> Double
  to_int(Int64) -> Int
  to_string(Int64) -> String
  trunc_double_u(Double) -> Int64
}
impl Double {
  compare(Double, Double) -> Int
  convert_i32_u(Int) -> Double
  convert_i64_u(Int64) -> Double
  default() -> Double
  op_add(Double, Double) -> Double
  op_div(Double, Double) -> Double
  op_equal(Double, Double) -> Bool
  op_mod(Double, Double) -> Double
  op_mul(Double, Double) -> Double
  op_neg(Double) -> Double
  op_neq(Double, Double) -> Bool
  op_sub(Double, Double) -> Double
  reinterpret_as_i64(Double) -> Int64
  sqrt(Double) -> Double
  to_int(Double) -> Int
  to_int64(Double) -> Int64
}
impl String {
  debug_write(String, Buffer) -> Unit
  get(String, Int) -> Char
  length(String) -> Int
  make(Int, Char) -> String
  op_add(String, String) -> String
  op_equal(String, String) -> Bool
  op_get(String, Int) -> Char
  to_js_string(String) -> Js_string
  to_string(String) -> String
}
impl Option {
  debug_write[X : Debug](Self[X], Buffer) -> Unit
  op_equal[X : Eq](Self[X], Self[X]) -> Bool
  to_string[X : Show](Self[X]) -> String
}
impl Result {
  debug_write[T : Debug, E : Debug](Self[T, E], Buffer) -> Unit
  op_equal[T : Eq, E : Eq](Self[T, E], Self[T, E]) -> Bool
}
impl List {
  debug_write[X : Debug](Self[X], Buffer) -> Unit
  op_equal[X : Eq](Self[X], Self[X]) -> Bool
  to_string[X : Debug](Self[X]) -> String
}
impl Array {
  debug_write[X : Debug](Self[X], Buffer) -> Unit
  default[X]() -> Self[X]
  get[T](Self[T], Int) -> T
  length[T](Self[T]) -> Int
  make[T](Int, T) -> Self[T]
  op_get[T](Self[T], Int) -> T
  op_set[T](Self[T], Int, T) -> Unit
  set[T](Self[T], Int, T) -> Unit
  to_string[X : Show](Self[X]) -> String
}
impl Bytes {
  blit(Bytes, Int, Bytes, Int, Int) -> Unit
  blit_from_string(Bytes, Int, String, Int, Int) -> Unit
  copy(Bytes) -> Bytes
  debug_write(Bytes, Buffer) -> Unit
  length(Bytes) -> Int
  make(Int, Int) -> Bytes
  of_string(String) -> Bytes
  op_get(Bytes, Int) -> Int
  op_set(Bytes, Int, Int) -> Unit
  set_utf16_char(Bytes, Int, Char) -> Int
  set_utf8_char(Bytes, Int, Char) -> Int
  sub_string(Bytes, Int, Int) -> String
  to_string(Bytes) -> String
  to_unchecked_string(Bytes) -> String
}
impl Ref {
  debug_write[X : Debug](Self[X], Buffer) -> Unit
}

// Traits
pub trait Compare : Eq {
  compare(Self, Self) -> Int
}

pub trait Debug {
  debug_write(Self, Buffer) -> Unit
}

pub trait Default {
  default() -> Self
}

pub trait Eq {
  op_equal(Self, Self) -> Bool
}

pub trait Hash {
  hash(Self) -> Int
}

pub trait Show {
  to_string(Self) -> String
}

// Extension Methods


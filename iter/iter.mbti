package moonbitlang/core/iter

// Values

// Types and methods
type Iter
impl Iter {
  _unstable_internal_make[T](((T) -> Bool) -> Bool) -> Self[T]
  append[T](Self[T], T) -> Self[T]
  concat[T](Self[T], Self[T]) -> Self[T]
  count[T](Self[T]) -> Int
  drop[T](Self[T], Int) -> Self[T]
  drop_while[T](Self[T], (T) -> Bool) -> Self[T]
  empty[T]() -> Self[T]
  filter[T](Self[T], (T) -> Bool) -> Self[T]
  find_first[T](Self[T], (T) -> Bool) -> Option[T]
  flat_map[T, R](Self[T], (T) -> Self[R]) -> Self[R]
  fold[T, B](Self[T], (B, T) -> B, B) -> B
  iter[T](Self[T], (T) -> Unit) -> Unit
  map[T, R](Self[T], (T) -> R) -> Self[R]
  op_add[T](Self[T], Self[T]) -> Self[T]
  prepend[T](Self[T], T) -> Self[T]
  repeat[T](T) -> Self[T]
  singleton[T](T) -> Self[T]
  take[T](Self[T], Int) -> Self[T]
  take_while[T](Self[T], (T) -> Bool) -> Self[T]
  tap[T](Self[T], (T) -> Unit) -> Self[T]
}

// Traits

// Extension Methods

